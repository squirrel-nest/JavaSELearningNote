<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app PUBLIC
	"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
	"http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
	<display-name>j2eetest</display-name>
	<description>j2eetest application</description>
	<!--
		- Key of the system property that should specify the root directory of this
		- web app. Applied by WebAppRootListener or Log4jConfigListener.
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>j2eetest.root</param-value>
	</context-param>
	<!--
		- Location of the Log4J config file, for initialization and refresh checks.
		- Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	<!--
		- Location of the XML file that defines the root application context.
		- Applied by ContextLoaderServlet.
		-
		- Can include "/WEB-INF/dataAccessContext-local.xml" for a single-database
		- context, or "/WEB-INF/dataAccessContext-jta.xml" for a two-database context.
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/dataAccessContext-local.xml
			/WEB-INF/applicationContext.xml
		</param-value>
	</context-param>
	
	<filter>
		<filter-name>contextSecurityFilter</filter-name>
		<filter-class>
			com.filters.ContextSecurityFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>GBK</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>contextSecurityFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>

	<!-- session invalidation redirect 
	  <filter>
	    <filter-name>authenticatefilter</filter-name>
	    <filter-class>com.ffcs.zydt.web.filters.AuthenticateFilter</filter-class>
	    <init-param>
	      <param-name>exclude</param-name>
	      <param-value>login.jsp,login.do,doNrwebUserAction.do,doCompAction.do,sessionovertime.jsp,loginout.jsp,nrwebuser_form.jsp,role_query.jsp,subregionselect.jsp,rscselect.jsp,rscselect_opti.jsp,subregionselect_opti.jsp,a.jsp,nrweb.jsp,delnrwebuser.jsp,editnrwebuser.jsp,dologinAction.do</param-value>
	    </init-param>
	    <init-param>
	      <param-name>failpage</param-name>
	      <param-value>../login.jsp</param-value>
	    </init-param>
	    <init-param>
	      <param-name>debug</param-name>
	      <param-value>false</param-value>
	    </init-param>
	  </filter>
	  
	  <filter-mapping>
	    <filter-name>authenticatefilter</filter-name>
	    <url-pattern>*.do</url-pattern>
	  </filter-mapping>
	
	  <filter-mapping>
	    <filter-name>authenticatefilter</filter-name>
	    <url-pattern>*.jsp</url-pattern>
	  </filter-mapping>
	  login.jsp-->
<!--zhushi -->
	<listener>
		<listener-class>
			org.springframework.web.util.Log4jConfigListener
		</listener-class>
	</listener>
	
	<!--
		- Loads the root application context of this web app at startup,
		- by default from "/WEB-INF/applicationContext.xml".
		- Note that it is preferable to use ContextLoaderListener in a servlet container
		- that follows the Servlet 2.4 initialization order (most Servlet 2.3 containers do).
		-
		- Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
		- to access it anywhere in the web application, outside of the framework.
		-
		- The root context is the parent of all servlet-specific contexts.
		- This means that its beans are automatically available in these child contexts,
		- both for getBean(name) calls and (external) bean references.
	-->
	<servlet>
		<servlet-name>context</servlet-name>
		<servlet-class>
			org.springframework.web.context.ContextLoaderServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!--
		- Struts servlet that dispatches requests to registered actions.
		- Reads its configuration from "struts-config.xml".
		-
		- A web app can just contain one such servlet.
		- If you need multiple namespaces, use Struts' module mechanism.
	-->
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.apache.struts.action.ActionServlet</servlet-class>		
		<init-param>
       <param-name>config</param-name>
	       <param-value>/WEB-INF/struts-config.xml
       </param-value>
       </init-param>
       <load-on-startup>2</load-on-startup>
	</servlet>
	
	<!--
		- Dispatcher servlet mapping for the main web user interface.
		- Either refering to "petstore" for the Spring web MVC dispatcher,
		- or to "action" for the Struts dispatcher.
		-
		- Simply comment out the "petstore" reference in favour of "action"
		- to switch from the Spring web tier to the Struts web tier.
	-->
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	
  <session-config>
	<session-timeout>60</session-timeout>
  </session-config>   
   <!-- buildMenuTree4Weblogic-->
   <mime-mapping>
		<extension>htc</extension>
		<mime-type>text/x-component</mime-type>
	</mime-mapping>
    
  <welcome-file-list>
    <welcome-file>login.jsp</welcome-file>
  </welcome-file-list>
	
	<resource-ref>
	  <res-ref-name>jdbc/dbpool</res-ref-name>
	  <res-type>javax.sql.DataSource</res-type>
	  <res-auth>Container</res-auth>
	</resource-ref>	

	<!-- Struts Tag Library Descriptors -->
	<taglib>
		<taglib-uri>c</taglib-uri>
		<taglib-location>/WEB-INF/c.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>fmt</taglib-uri>
		<taglib-location>/WEB-INF/fmt.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>struts-bean</taglib-uri>
		<taglib-location>/WEB-INF/struts-bean.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>struts-logic</taglib-uri>
		<taglib-location>/WEB-INF/struts-logic.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>struts-html</taglib-uri>
		<taglib-location>/WEB-INF/struts-html.tld</taglib-location>
	</taglib>
    <taglib>
        <taglib-uri>terac</taglib-uri>
        <taglib-location>/WEB-INF/terac.tld</taglib-location>
    </taglib>
</web-app>