<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://platform.netbeans.org/tutorials/nbm-mfsyntax.html -->
<HTML><HEAD><TITLE>platform: NetBeans Manifest File Syntax Highlighting Module Tutorial</TITLE>
<SCRIPT 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/tigris.js" 
type=text/javascript></SCRIPT>
<LINK 
href="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/netbeans.css" 
type=text/css rel=stylesheet>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META http-equiv=Content-Style-Type content=text/css>
<META content=3.5.1.19.10 name=SourceCastVersion><LINK 
href="http://www.netbeans.org/favicon.ico" type=image/x-icon 
rel="shortcut icon"><!-- -*- xhtml -*- --><LINK 
href="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/netbeans.css" 
type=text/css rel=stylesheet>
<META content=NBUSER name=AUDIENCE>
<META content=ARTICLE name=TYPE>
<META content=N name=EXPIRES>
<META content=gwielenga@netbeans.org name=developer>
<META content=y name=indexed>
<META content="A short guide to using the Nodes API." name=description><!--      Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved. --><!--     Use is subject to license terms.-->
<META 
content="java IDE, java editor, java Platform, free, open source, java development, j2ee support, development enviroment, web development, NetBeans, IDE, java" 
name=keywords>
<SCRIPT language=JavaScript type=text/javascript>
<!--
var username="guest";
//-->
</SCRIPT>

<META content="MSHTML 6.00.2900.2912" name=GENERATOR></HEAD>
<BODY class="composite blue-bg"><!-- begin TopTabs  --><!-- static Community tab selected banner -->
<DIV style="HEIGHT: 50px; BACKGROUND-COLOR: #ccd2e2">
<DIV id=floating-logo>
<DIV id=search>
<FORM style="DISPLAY: inline" action=http://www.google.com/custom method=get>
<TABLE>
  <TBODY>
  <TR>
    <TD><A href="http://www.netbeans.org/community/search.html">Search:</A> 
</TD>
    <TD><INPUT class=text name=q></TD>
    <TD><INPUT type=image alt="Search netbeans.org" 
      src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/search-button.gif" 
      name=Button> <INPUT type=hidden 
      value=GIMP:#FF0F12;LW:193;ALC:#FF0F12;L:http://www.netbeans.org/images/logo.gif;GFNT:#8A8DB0;LC:#0E0E76;LH:45;AH:center;VLC:#0E0E76;S:http://www.netbeans.org/;AWFID:a8753e5d03543916; 
      name=cof><INPUT type=hidden value=netbeans.org name=domains><INPUT 
      type=hidden value=netbeans.org name=sitesearch> 
</TD></TR></TBODY></TABLE></FORM></DIV>
<DIV class=float-left><A href="http://www.netbeans.org/index.html"><IMG 
class=logo-link title="NetBeans.org - go to the homepage" 
style="PADDING-TOP: 10px" height=60 alt="netbeans.org - go to homepage" 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/nb-logo2.gif" 
width=150 border=0></A></DIV></DIV></DIV>
<DIV id=center-container><!-- layer centering whole page -->
<DIV id=floating-page><!-- margins for whole page -->
<DIV id=floating-tabs-container><IMG class=float-left style="MARGIN-LEFT: -3px" 
height=26 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/corner-left.png" 
width=11><IMG class=float-right style="MARGIN-RIGHT: -3px" height=26 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/corner-right.png" 
width=14>
<DIV id=floating-tabs><A title="" href="http://www.netbeans.org/index.html"><IMG 
class=iMenu height=26 alt="" 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/home-off.png" 
width=120 border=0></A><A title=Products 
href="http://www.netbeans.org/products/index.html"><IMG class=iMenu height=26 
alt=Products 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/products-off.png" 
width=120 border=0></A><A title=Plugins 
href="http://plugins.netbeans.org/PluginPortal/"><IMG class=iMenu height=26 
alt=Plugins 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/catalogue-off.png" 
width=120 border=0></A><A title=Docs&nbsp;&amp;&nbsp;Support 
href="http://www.netbeans.org/kb/index.html"><IMG class=iMenu height=26 
alt=Docs&nbsp;&amp;&nbsp;Support 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/kb-off.png" 
width=120 border=0></A><A title=Community 
href="http://www.netbeans.org/community/index.html"><IMG class=iMenu height=26 
alt=Community 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/community-on.png" 
width=120 border=0></A><A title=Partners 
href="http://www.netbeans.org/community/partners/index.html"><IMG class=iMenu 
height=26 alt=Partners 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/partners-off2.png" 
width=120 border=0></A></DIV></DIV>
<DIV id=shade-left>
<DIV id=shade-right>
<DIV id=navig-breadcrumbs style="MARGIN-LEFT: 3px"><!-- Home - Community - Projects, and module switcher combo --><A 
href="http://www.netbeans.org/index.html">HOME</A> &gt; <A 
href="http://www.netbeans.org/community/index.html">Community</A> &gt; <A 
href="http://www.netbeans.org/community/projects/index.html">Projects</A> &gt; 
platform </DIV>
<TABLE class=colapse id=floating-contenttable style="MARGIN-RIGHT: auto">
  <TBODY>
  <TR>
    <TD class="valign-top b-right full-width">
      <DIV class="f-page-cell bg-white" style="MARGIN-LEFT: 3px">
      <DIV style="WIDTH: 96%"><!-- NO print link --><!-- end TopTabs --><!-- Servlet-Specific template -->
      <H1>NetBeans Manifest File Syntax Highlighting Module Tutorial</H1>
      <P>
      <DIV 
      style="BORDER-RIGHT: rgb(14,27,85) 1px solid; PADDING-RIGHT: 30px; BORDER-TOP: rgb(14,27,85) 1px solid; PADDING-LEFT: 30px; PADDING-BOTTOM: 10px; MARGIN-LEFT: 60px; BORDER-LEFT: rgb(14,27,85) 1px solid; MARGIN-RIGHT: 40px; PADDING-TOP: 10px; BORDER-BOTTOM: rgb(14,27,85) 1px solid; BACKGROUND-COLOR: rgb(231,231,231)">Please 
      note that <B>not all the APIs described in this tutorial are currently 
      final</B>. Use them at your own risk. There is no guarantee that APIs used 
      in this tutorial will be compatible with the final or next release of 
      NetBeans. </DIV>
      <P>This tutorial shows you how to enhance the IDE by adding syntax 
      highlighting for Manifest files. At the end of this tutorial, you will 
      have a NetBeans plug-in module file (NBM) that you can share with others. 
      When it is installed via the NetBeans Update Center, the 'name', 'colon', 
      and 'value' of manifest entries will have distinct colors, as illustrated 
      below: 
      <P><IMG alt="Highlighted manifest file" 
      src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/result1.png"> 

      <P>In addition, you will be able to use the Options window to modify the 
      colors. 
      <P>The following topics are covered in this tutorial:</P>
      <UL>
        <LI><A 
        href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#gettingtoknowthesample">Getting 
        to Know the Sample</A> 
        <UL>
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#installing-software">Installing 
          the Software</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#installing-sample">Installing 
          the Sample</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#introducing-sample">Introducing 
          the Sample</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#introducing-sources">Introducing 
          the Sources</A> </LI></UL>
        <LI><A 
        href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#settingupthemoduleproject">Setting 
        Up the Module Project</A> 
        <UL>
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#creatingthemoduleproject">Creating 
          the Module Project</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#specifying">Specifying 
          the Module's Dependencies</A> </LI></UL>
        <LI><A 
        href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#creatingthemainfiles">Creating 
        the Main Files</A> 
        <UL>
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#tokenizing">Creating 
          Tokens</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#syntaxing">Creating 
          Syntax</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#testing">Giving 
          the IDE a Reading Test</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#editorkitting">Creating 
          the Editor Kit</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#syntaxcoloring">Creating 
          the Syntax Coloring</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#colorrestoring">Creating 
          the Color Restorer</A></LI></UL>
        <LI><A 
        href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#creatingthemainfiles">Creating 
        the Supporting Files</A> 
        <UL>
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#creatingoptions">Creating 
          Options</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#dipslayingoptionsinoptionswindow">Displaying 
          the Options in the Options Window</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#instantiating">Instantiating 
          the Options</A> 
          <LI><A 
          href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#registeringoptions">Registering 
          the Options in the NetBeans System Filesystem</A> </LI></UL>
        <LI><A 
        href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#building">Building 
        and Installing the Module</A> 
        <LI><A 
        href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#explore">Exploring 
        Further</A> </LI></UL>
      <P><A name=top></A>Once the software is installed, this tutorial can be 
      completed in 60 minutes. 
      <P>For more information on creating NetBeans plug-in modules, see the <A 
      href="http://platform.netbeans.org/index.html">NetBeans Development 
      Project home</A> on the NetBeans website. If you have questions, visit the 
      <A 
      href="http://wiki.netbeans.info/wiki/view/NetBeansDeveloperFAQ">NetBeans 
      Developer FAQ</A> or use the feedback link at the top of this 
page.</P><BR><!-- ===================================================================================== -->
      <H2><A name=gettingtoknowthesample></A>Getting to Know the Sample</H2>
      <P>Before you start writing the module, you have to make sure you have all 
      of the necessary software. In addition, you might want to play with the 
      sample before building it yourself.</P>
      <DIV class=indent>
      <H3 class=tutorial><A name=installing-software></A>Installing the 
      Software</H3>
      <P>Before you begin, you need to install the following software on your 
      computer:</P>
      <UL>
        <LI>NetBeans IDE 5.x (<A 
        href="http://www.netbeans.info/downloads/download.php?a=n&amp;p=1">download</A>) 

        <LI>Java Standard Development Kit (JDK™) version 1.4.2 (<A 
        href="http://java.sun.com/j2se/1.4.2/download.html">download</A>) or 5.0 
        (<A href="http://java.sun.com/j2se/1.5.0/download.jsp">download</A>) 
        </LI></UL>
      <H3 class=tutorial><A name=installing-sample></A>Installing the 
Sample</H3>
      <P>Take the following steps to install the sample: 
      <OL>
        <P>
        <LI>Unzip the <A 
        href="http://www.netbeans.org/files/documents/4/583/ManifestSupport.zip">attached 
        file</A>. 
        <P></P>
        <LI>In the IDE, choose File &gt; Open Project and browse to the folder 
        that contains the unzipped file. Open the module project. It should look 
        as follows: 
        <P><IMG alt="Final Projects window" 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/final_projects_window.png"> 

        <P></P>
        <LI>Right-click the project node and choose Install/Reload in Target 
        Platform. The target platform opens and the module is installed.</LI></OL>
      <H3 class=tutorial><A name=introducing-sample></A>Introducing the 
      Sample</H3>
      <OL>
        <P>
        <LI>Use the New project wizard (Ctrl-Shift-N) to create a new Java 
        application project or NetBeans plug-in module project and notice that 
        the project's manifest file has syntax highlighting, as shown in the 
        introduction of this tutorial. 
        <P></P>
        <LI>Choose Tools &gt; Options. In the Options window, click Fonts &amp; 
        Colors in the left sidebar and notice that there is an entry called 
        'Manifest' in the Language drop-down list, as shown below: 
        <P><IMG alt="Fonts and Colors 1" 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/fonts-and-colors-1.png"> 

        <P></P>
        <LI>Select City Lights in the Profile drop-down list at the top of the 
        Fonts &amp; Colors page, and notice that the syntax changes, as shown 
        below: 
        <P><IMG alt="Fonts and Colors 4" 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/fonts-and-colors-4.png"> 

        <P></P>
        <LI>Click Editor in the left sidebar and notice that there is an entry 
        called 'Manifest' in the Language drop-down list, as shown below: 
        <P><IMG alt="Fonts and Colors 2" 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/fonts-and-colors-2.png"> 

        <P></P>
        <LI>Click Advanced Options in the lower left corner of the Options 
        window. In the Editor Settings node, notice that there is a new entry 
        for the Manifest Editor, as shown below: 
        <P><IMG alt="Fonts and Colors 3" 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/fonts-and-colors-3.png"> 
        </P></LI></OL>
      <P>Now that you know what the user interface of the Manifest Support 
      plug-in module looks like, let's have a quick look at what each of the 
      source files does. 
      <P>
      <H3 class=tutorial><A name=introducing-sources></A>Introducing the 
      Sources</H3>
      <P>The Manifest Support sample consists of main files and supporting 
      files.</P>
      <UL>
        <LI>
        <P><B>Main Files.</B> The module's main files are in the 
        <TT>org.netbeans.modules.manifestsupport</TT> package: 
        <P><IMG alt="Main files." 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/final_projects_window1.png"> 

        <P>
        <TABLE width="76%" border=1>
          <TBODY>
          <TR>
            <TD>
              <DIV align=left><B>File</B></DIV></TD>
            <TD>
              <DIV align=left><B>Description</B></DIV></TD></TR>
          <TR>
            <TD vAlign=top align=left><TT>Bundle.properties</TT></TD>
            <TD>Localization information. </TD></TR>
          <TR>
            <TD vAlign=top align=left><A 
              href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#editorkitting"><TT>ManifestEditorKit.java</TT></A></TD>
            <TD>Extends the <A 
              href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor/org/netbeans/modules/editor/NbEditorKit.html">NbEditorKit</A> 
              class. </TD></TR>
          <TR>
            <TD vAlign=top align=left><A 
              href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#syntaxcoloring"><TT>ManifestSettingsInitializer.java</TT></A></TD>
            <TD>Extends the <A 
              href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor-lib/org/netbeans/editor/Settings.AbstractInitializer.html">Settings.AbstractInitializer</A> 
              class. Includes an inner class than extends the <A 
              href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor-lib/org/netbeans/editor/SettingsUtil.TokenColoringInitializer.html">SettingsUtil.TokenColoringInitializer</A> 
              class. </TD></TR>
          <TR>
            <TD vAlign=top align=left><A 
              href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#syntaxing"><TT>ManifestSyntax.java</TT></A></TD>
            <TD>Extends the <A 
              href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor-lib/org/netbeans/editor/Syntax.html">Syntax</A> 
              class. </TD></TR>
          <TR>
            <TD vAlign=top align=left><A 
              href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#tokenizing"><TT>ManifestTokenContext.java</TT></A></TD>
            <TD>Extends the <A 
              href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor-lib/org/netbeans/editor/TokenContext.html">TokenContext</A> 
              class. </TD></TR>
          <TR>
            <TD vAlign=top align=left><A 
              href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#colorrestoring"><TT>RestoreColoring.java</TT></A></TD>
            <TD>Extends the <A 
              href="http://www.netbeans.org/download/dev/javadoc/org-openide-modules/org/openide/modules/ModuleInstall.html">ModuleInstall</A> 
              class. </TD></TR>
          <TR>
            <TD vAlign=top align=left><TT>layer.xml</TT></TD>
            <TD>This is the NetBeans System Filesystem configuration file. It 
              registers the following information in the NetBeans System 
              Filesystem: 
              <UL>
                <LI>Ability to distinguish Manifest file data objects (via the 
                <TT>.mf</TT> file extension and 
                <TT>text/x-java-jar-manifest</TT> MIME Type). 
                <LI>Actions that appear in the right-click pop-up menu. 
                <LI>A dummy template for creating new Manifest files is 
                registered in the New File wizard. 
                <LI>Editor kit, containing syntax highlighting information. 
                <LI>Options settings file for instantiation of the relevant 
                information in the Options window. 
                <LI>Coloring information for the Options window, one set for the 
                NetBeans profile and another set for the City Lights profile. 
                </LI></UL></TD></TR></TBODY></TABLE></P>
        <LI>
        <P><B>Supporting Files.</B> 
        <UL>
          <LI>
          <P><B>Data Object Files.</B> The module's files that distinguish 
          Manifest files from other files are in the 
          <TT>org.netbeans.modules.manifestsupport.dataobject</TT> package: 
          <P><IMG alt="Data object files." 
          src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/final_projects_window2.png"> 

          <P>For information on these files, see the <A 
          href="http://platform.netbeans.org/tutorials/nbm-filetype.html">NetBeans 
          DataLoader Module Tutorial</A>. </P>
          <LI>
          <P><B>Options Window Files.</B> The module's files that install 
          information in the Options window are in the 
          <TT>org.netbeans.modules.manifestsupport.options</TT> package: 
          <P><IMG alt="Options window files." 
          src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/final_projects_window3.png"> 

          <P>
          <TABLE width="76%" border=1>
            <TBODY>
            <TR>
              <TD>
                <DIV align=left><B>File</B></DIV></TD>
              <TD>
                <DIV align=left><B>Description</B></DIV></TD></TR>
            <TR>
              <TD vAlign=top align=left><TT>Bundle.properties</TT></TD>
              <TD>Localization information. </TD></TR>
            <TR>
              <TD vAlign=top align=left><TT>ManifestOptions.java</TT></TD>
              <TD>Extends the <A 
                href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor/org/netbeans/modules/editor/options/BaseOptions.html">BaseOptions</A> 
                class. </TD></TR>
            <TR>
              <TD vAlign=top align=left><TT>ManifestOptions.settings</TT></TD>
              <TD>Instantiation data for the Options window. </TD></TR>
            <TR>
              <TD vAlign=top 
              align=left><TT>ManifestOptionsBeanInfo.java</TT></TD>
              <TD>Extends the <A 
                href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor/org/netbeans/modules/editor/options/BaseOptionsBeanInfo.html">BaseOptionsBeanInfo</A> 
                class. </TD></TR>
            <TR>
              <TD vAlign=top align=left><TT>mfOptions.gif</TT></TD>
              <TD>GIF file displayed in the node for the Manifest Editor in 
                the Classic View of the Options window. 
          </TD></TR></TD></TR></TBODY></TABLE></P>
          <LI>
          <P><B>Resources.</B> The module's resources are in the 
          <TT>org.netbeans.modules.manifestsupport.resources</TT> package and in 
          the Unit Test Packages node: 
          <P><IMG alt="Resources files." 
          src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/final_projects_window4.png"> 

          <P>
          <TABLE width="76%" border=1>
            <TBODY>
            <TR>
              <TD>
                <DIV align=left><B>File</B></DIV></TD>
              <TD>
                <DIV align=left><B>Description</B></DIV></TD></TR>
            <TR>
              <TD vAlign=top 
                align=left><TT>CityLights-Properties-fontsColors.xml</TT></TD>
              <TD>Colors for the CityLights profile in the Fonts &amp; Colors 
                page of the Options window. </TD></TR>
            <TR>
              <TD vAlign=top align=left><TT>ManifestExample</TT></TD>
              <TD>Example used in the Fonts &amp; Colors page of the Options 
                window. </TD></TR>
            <TR>
              <TD vAlign=top 
                align=left><TT>NetBeans-Manifest-fontsColors.xml</TT></TD>
              <TD>Colors for the NetBeans profile in the Fonts &amp; Colors 
                page of the Options window. </TD></TR>
            <TR>
              <TD vAlign=top align=left><TT>ManifestSyntaxTest.java</TT></TD>
              <TD>JUnit test for testing the Manifest file's tokens. 
            </TD></TR></TD></TR></TBODY></TABLE></P>
          <LI>
          <P><B>Important Files.</B> The Projects window is typically used to 
          display a project's packages. However, to simplify working with some 
          of the more important files in the project, you can access them 
          through the Important Files node: 
          <P><IMG alt="Important files." 
          src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/final_projects_window5.png"> 

          <P>For basic information each of the Important Files, see the <A 
          href="http://www.netbeans.org/kb/articles/quickstart-nbm.html">Introduction 
          to NetBeans Module Development</A>.</P></LI></UL></LI></UL></DIV><BR><!-- ===================================================================================== -->
      <H2><A name=settingupthemoduleproject></A>Setting Up the Module 
      Project</H2>
      <P>Before you start writing the module, you have to make sure you that 
      your project is set up correctly. <A 
      href="http://www.netbeans.info/downloads/download.php?a=n&amp;p=1">NetBeans 
      IDE 5.x</A> provides a wizard that sets up all the basic files needed for 
      a module.</P>
      <DIV class=indent>
      <H3 class=tutorial><A name=creatingthemoduleproject></A>Creating the 
      Module Project</H3>
      <OL>
        <P>
        <LI>Choose File &gt; New Project. Under Categories, select NetBeans 
        Plug-in Modules. Under projects, select Module Project and click Next. 
        <P></P>
        <LI>In the Name and Location panel, type <TT>ManifestSupport</TT> in 
        Project Name. Change the Project Location to any directory on your 
        computer, such as <TT>c:\mymodules</TT>. Leave the Standalone Module 
        radiobutton and the Set as Main Project checkbox selected. Click Next. 
        <P></P>
        <LI>In the Basic Module Configuration panel, replace 
        <TT>yourorghere</TT> in Code Name Base with <TT>netbeans.modules</TT> so 
        that the whole name is <TT>org.netbeans.modules.manifestsupport</TT>. 
        Leave <TT>ManifestSupport</TT> as the Module Display Name. Leave the 
        location of the localizing bundle and XML layer, so that they will be 
        stored in a package with the name 
        <TT>org.netbeans.modules.manifestsupport</TT>. Click Finish.</LI></OL>
      <P>The IDE creates the <TT>ManifestSupport</TT> project. The project 
      contains all of your sources and project metadata, such as the project's 
      Ant build script. The project opens in the IDE. You can view its logical 
      structure in the Projects window (Ctrl-1) and its file structure in the 
      Files window (Ctrl-2). 
      <P>
      <H3 class=tutorial><A name=specifying></A>Specifying the Module's 
      Dependencies</H3>
      <P>You will need to subclass several classes that belong to <A 
      href="http://www.netbeans.org/download/dev/javadoc/">NetBeans APIs</A>. 
      Each has to be declared as a Module dependency. Use the Project Properties 
      dialog box for this purpose. 
      <OL>
        <LI>In the Projects window, right-click the <TT>ManifestSupport</TT> 
        project node and choose Properties. In the Project Properties dialog 
        box, click Libraries. 
        <P></P>
        <LI>For each of the following APIs that is not already present in the 
        Libraries panel, click "Add...", select the name from the Module list, 
        and then click OK to confirm it: 
        <P>
        <UL>
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-loaders/org/openide/loaders/doc-files/api.html">Datasystems 
          API</A></TT> 
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-text/overview-summary.html">Editor 
          API</A></TT> 
          <LI><TT>Editor Library API</TT> 
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-filesystems/overview-summary.html">File 
          System API</A></TT> 
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-modules/overview-summary.html">Module 
          System API</A></TT> 
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-nodes/overview-summary.html">Nodes 
          API</A></TT> 
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-options/org/openide/options/doc-files/api.html">Settings 
          Options API</A></TT> 
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-text/overview-summary.html">Text 
          API</A></TT> 
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-util/overview-summary.html">Utilities 
          API</A></TT> 
          <LI><TT><A 
          href="http://www.netbeans.org/download/dev/javadoc/org-openide-windows/overview-summary.html">Window 
          System API</A></TT> </LI></UL>
        <P>You should now see the following: 
        <P><IMG alt="Project Properties dialog box." 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/proj-props1.png"> 

        <P></P>
        <LI>Click OK to exit the Project Properties dialog box. 
        <P></P>
        <LI>In the Projects window, expand the Important Files node, 
        double-click the Project Metadata node, and note that the APIs you 
        selected have been declared as Module dependencies: <PRE class=examplecode>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://www.netbeans.org/ns/project/1"&gt;
    &lt;type&gt;org.netbeans.modules.apisupport.project&lt;/type&gt;
    &lt;configuration&gt;
        &lt;data xmlns="http://www.netbeans.org/ns/nb-module-project/2"&gt;
            &lt;code-name-base&gt;org.netbeans.modules.manifestsupport&lt;/code-name-base&gt;
            &lt;standalone/&gt;
            &lt;module-dependencies&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.netbeans.modules.editor&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;release-version&gt;3&lt;/release-version&gt;
                        &lt;specification-version&gt;1.25.0.1&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.netbeans.modules.editor.lib&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;release-version&gt;1&lt;/release-version&gt;
                        &lt;specification-version&gt;1.8.0.1&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.openide.modules&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;specification-version&gt;6.4&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.openide.options&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;specification-version&gt;6.3&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.openide.util&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;specification-version&gt;6.5&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.openide.filesystems&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;specification-version&gt;6.3&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.openide.loaders&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;specification-version&gt;5.7&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.openide.nodes&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;specification-version&gt;6.6&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.openide.text&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;specification-version&gt;6.7&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
                &lt;dependency&gt;
                    &lt;code-name-base&gt;org.openide.windows&lt;/code-name-base&gt;
                    &lt;build-prerequisite/&gt;
                    &lt;compile-dependency/&gt;
                    &lt;run-dependency&gt;
                        &lt;specification-version&gt;6.3&lt;/specification-version&gt;
                    &lt;/run-dependency&gt;
                &lt;/dependency&gt;
            &lt;/module-dependencies&gt;
            &lt;public-packages/&gt;
        &lt;/data&gt;
    &lt;/configuration&gt;
&lt;/project&gt;</PRE></LI></OL><!-- ===================================================================================== -->
      <H2><A name=creatingthemodule></A>Creating the Main Files</H2>
      <P>Creating the module starts with ensuring that the IDE recognizes 
      Manifest files. By default, it does not recognize them and, therefore, 
      treats them as text files. Work through the <A 
      href="http://platform.netbeans.org/tutorials/nbm-filetype.html">NetBeans 
      DataLoader Module Tutorial</A> before going further—make sure that you put 
      the files you create in a package called 
      <TT>org.netbeans.modules.manifestsupport.dataobject</TT>. Before you go 
      further with this tutorial, the IDE should be able to recognize Manifest 
      files. At the end of the NetBeans DataLoader Module Tutorial, you should 
      have a new MIME Type, too: <TT>text/x-java-jar-manifest</TT>. This MIME 
      Type is used throughout this tutorial. 
      <P>Once you have a dataloader specifically for Manifest files, you need to 
      identify items in the Manifest file that you want the IDE to be able to 
      distinguish from each other. Each distinct item is called a <I>token</I>. 
      Once you have created tokens, you need to tell the IDE how to interpret 
      the text it finds—it needs to be told which piece of text constitutes 
      which token. In other words, you need to create a <I>syntax</I>. Next, you 
      associate the tokens with colors. In the process, you create an editor 
      specifically for Manifest files. 
      <DIV class=indent>
      <P>
      <H3 class=tutorial><A name=tokenizing></A>Creating Tokens</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Right-click the <TT>ManifestSupport</TT> 
        project node, choose New &gt; Java Class, and type 
        <TT>ManifestTokenContext</TT> in Class Name. Click Finish. The new Java 
        class opens in the Source Editor. Replace the default code with the 
        following: <PRE class=examplecode>package org.netbeans.modules.manifestsupport;

import org.netbeans.editor.BaseTokenID;
import org.netbeans.editor.TokenContext;
import org.netbeans.editor.TokenContextPath;
import org.netbeans.editor.Utilities;

public class ManifestTokenContext extends <A href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor-lib/org/netbeans/editor/TokenContext.html">TokenContext</A> {
       
    // Numeric-ids for token categories
    public static final int NAME_ID = 1;
    public static final int COLON_ID = 2;
    public static final int VALUE_ID = 3;
    public static final int END_OF_LINE_ID = 4;
    
    // Token-ids
    public static final BaseTokenID NAME = new BaseTokenID("name", NAME_ID);
    public static final BaseTokenID COLON = new BaseTokenID("colon", COLON_ID);
    public static final BaseTokenID VALUE = new BaseTokenID("value", VALUE_ID);
    public static final BaseTokenID END_OF_LINE =
            new BaseTokenID("end-of-line", END_OF_LINE_ID);
   
    // Context instance declaration
    public static final ManifestTokenContext context = new ManifestTokenContext();
    public static final TokenContextPath contextPath = context.getContextPath();
    
    /**
     * Construct a new ManifestTokenContext
     */
    private ManifestTokenContext() {
        super("mf-");
        
        try {
            addDeclaredTokenIDs();
        } catch (Exception e) {
            Utilities.annotateLoggable(e);
        }
    }
}</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This Java class specifies a token for 
        each item in the Manifest file with which we want to work. Each distinct 
        item in a Manifest file is a token: 'name', 'colon', and 'value'. In 
        addition, there is also a token for the end of the line, because we need 
        to work with the end of the line—the end of the line determines where a 
        value ends and the next name begins. The constructor above specifies 
        that all tokens will be prefaced by 'mf-'. So, we've now created tokens 
        called 'mf-name', 'mf-colon', 'mf-value', and 'mf-end-of-line'. </LI></OL>
      <H3 class=tutorial><A name=syntaxing></A>Creating Syntax</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Right-click the <TT>ManifestSupport</TT> 
        project node, choose New &gt; Java Class, and type 
        <TT>ManifestSyntax</TT> in Class Name. Click Finish. The new Java class 
        opens in the Source Editor. Replace the default code with the following: 
<PRE class=examplecode>package org.netbeans.modules.manifestsupport;

import org.netbeans.editor.Syntax;
import org.netbeans.editor.TokenID;
import org.openide.ErrorManager;

public class ManifestSyntax extends Syntax {
    
    /**
     * The logger for this class. It can be used for tracing the class activity, 
     * logging debug messages, etc.
     */
    private static final ErrorManager LOGGER = 
            ErrorManager.getDefault().getInstance("org.netbeans.modules." +
            "manifestsupport.ManifestSyntax");
    
    /**
     * Used to avoing calling the log() or notify() method if the message 
     * wouldn't be loggable anyway.
     */
    private static final boolean LOG = 
            LOGGER.isLoggable(ErrorManager.INFORMATIONAL);
    
    // The states for the lexical analyzer
    
    private static final int ISI_NAME = 1; // inside the name part
    private static final int ISA_AFTER_NAME = ISI_NAME + 1; // immediately after the name part
    private static final int ISA_AFTER_COLON = ISA_AFTER_NAME + 1; // immediately after the 
                                                                   // colon between the name 
                                                                   // and the value
    private static final int ISI_VALUE = ISA_AFTER_COLON + 1; // inside the value part
    
    protected TokenID parseToken() {
        TokenID result = doParseToken();
        if (LOG) {
            LOGGER.log(ErrorManager.INFORMATIONAL, "parseToken: " + result);
        }
        return result;
    }
    
    private TokenID doParseToken() {
        char actChar;
        
        while (offset &lt; stopOffset) {
            actChar = buffer[offset];
            
            switch (state) {
                case INIT:
                    switch (actChar) {
                        case ':':
                            state = ISA_AFTER_COLON;
                            offset++;
                            return ManifestTokenContext.COLON;
                        case '\n':
                            state = INIT;
                            offset++;
                            return ManifestTokenContext.END_OF_LINE;
                        default:
                            state = ISI_NAME;
                    }
                    break;
                    
                case ISI_NAME:
                    switch (actChar) {
                        case ':':
                        case '\n':
                            state = ISA_AFTER_NAME;
                            return ManifestTokenContext.NAME;
                    }
                    break;
                    
                case ISA_AFTER_NAME:
                    switch (actChar) {
                        case ':':
                            state = ISA_AFTER_COLON;
                            offset++;
                            return ManifestTokenContext.COLON;
                        case '\n':
                            state = INIT;
                            offset++;
                            return ManifestTokenContext.END_OF_LINE;
                        default:
                            assert false;
                    }
                    break;
                    
                case ISA_AFTER_COLON:
                    switch (actChar) {
                        case '\n':
                            state = INIT;
                            offset++;
                            return ManifestTokenContext.END_OF_LINE;
                        default:
                            state = ISI_VALUE;
                    }
                    break;
                    
                case ISI_VALUE:
                    switch (actChar) {
                        case '\n':
                            state = INIT;
                            return ManifestTokenContext.VALUE;
                    }
                    break;
            }
            
            offset++;
        }
        
        /*
         * At this stage there's no more text in the scanned buffer.
         * It is valid to return a token here only if this is the last
         * buffer (otherwise the token could continue in the next buffer).
         */
        if (lastBuffer) {
            switch (state) {
                case ISI_NAME:
                    state = INIT;
                    return ManifestTokenContext.NAME;
                case ISI_VALUE:
                    state = INIT;
                    return ManifestTokenContext.VALUE;
            }
        }
        
        return null;
    }
    
}</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This Java class tells the IDE which part 
        of the text is which token. It does this by starting in an initial state 
        and sequentially looking at each character in the text and deciding if 
        it stays in that state, moves to another state, or announces that a 
        token was found. 
        <P>For example, for names the IDE starts in the initial state and the 
        first time it encounters a valid character for a name, it enters the 
        <TT>ISI_NAME</TT> state. It stays in this state until it encounters a 
        <TT>\r</TT>, <TT>\n</TT> or <TT>:</TT> character, which cannot be part 
        of a name. When it encounters such a character, the IDE knows that the 
        characters it just traversed make up a name token. The code runs within 
        a while loop. At the end there is a break statement, which increases the 
        offset in the text. The return statement in the code avoids increasing 
        the offset and ensures that the parsing of the next token, after a name, 
        will start with this character (it will likely be a colon, which is a 
        meaningful token itself). The break statement, on the other hand, 
        ensures that offset is increased. When all the characters up to the 
        colon are tested, the IDE knows whether the cursor is inside a name or 
        not. </P></LI></OL>
      <H3 class=tutorial><A name=testing></A>Giving the IDE a Reading Test</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Right-click the Unit Test Packages node, 
        choose New &gt; Java Class, type <TT>ManifestSyntaxTest</TT> in Class 
        Name, and type <TT>org.netbeans.modules.manifestsupport</TT> in Package. 
        Click Finish. The new Java class opens in the Source Editor. Replace the 
        default code with the following: <PRE class=examplecode>import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import junit.framework.TestCase;
import org.netbeans.editor.Syntax;
import org.netbeans.editor.TokenID;
import org.netbeans.modules.manifestsupport.*;
import junit.framework.TestCase;

public class ManifestSyntaxTest extends TestCase {
    
    public ManifestSyntaxTest(String testName) {
        super(testName);
    }
    
    public void testNextToken() {
	doParse("Manifest-Version: 1.0", new TokenID[] {
            ManifestTokenContext.NAME,
            ManifestTokenContext.COLON,
            ManifestTokenContext.VALUE,
        });
        doParse("Manifest-Version: 1.0\n\n" + 
                 "OpenIDE-Module: org.netbeans.modules.manifestsupport\n", 
                 new TokenID[] {
           ManifestTokenContext.NAME,
           ManifestTokenContext.COLON,
           ManifestTokenContext.VALUE,
           ManifestTokenContext.END_OF_LINE,
           ManifestTokenContext.END_OF_LINE,
           ManifestTokenContext.NAME,
   	   ManifestTokenContext.COLON,
           ManifestTokenContext.VALUE,
           ManifestTokenContext.END_OF_LINE,
        });
    }
        
    public void doParse(String m, TokenID[] expected) {
        Syntax s = new ManifestSyntax();
        s.load(null, m.toCharArray(), 0, m.length(), true, m.length());
        
        TokenID token = null;
        Iterator i = Arrays.asList(expected).iterator();
        do {
            token = s.nextToken();
            if (token != null) {
                if (!i.hasNext()) {
                    fail("More tokens returned than expected.");
                } else {
                    assertSame("Tokens differ", i.next(), token);
                }
            } else {
                assertFalse("More tokens expected than returned.", i.hasNext());
            }
            System.out.println(token);
        } while (token != null);
    }
}</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This Java class checks that the IDE is 
        able to correctly convert text to tokens. To run the test, right-click 
        the project node and choose Run Unit Tests. The test should succeed, 
        returning the following result in the JUnit Test Results window: 
        <P><IMG alt="error result from JUnit test." 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/junit-success.png"> 

        <P>You can play with the <TT>testNextToken()</TT> method to see what the 
        IDE does when the entered text does not comply with the specified 
        tokens. For example, change the method by deleting one of the token IDs 
        (<TT>ManifestTokenContext.VALUE</TT>), so that the method looks as 
        follows: 
        <P></P><PRE class=examplecode>public void testNextToken() {
   doParse("Manifest-Version: 1.0", new TokenID[] {
        ManifestTokenContext.NAME,
        ManifestTokenContext.COLON,
   });
}</PRE>
        <P>Now there are more tokens than token IDs. (There are two token IDs 
        here—<TT>ManifestTokenContext.NAME</TT> and 
        <TT>ManifestTokenContext.COLON</TT>.) When you run the JUnit test, the 
        message 'More tokens returned than expected.' is returned: 
        <P><IMG alt="error result from JUnit test." 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/junit-more-tokens-than-expected.png"> 

        <P>Now change the method by deleting the colon between 
        <TT>Manifest-Version</TT> and <TT>1.0</TT>, as shown below: 
        <P></P><PRE class=examplecode>public void testNextToken() {
   doParse("Manifest-Version 1.0", new TokenID[] {
        ManifestTokenContext.NAME,
        ManifestTokenContext.COLON,
        ManifestTokenContext.VALUE,
   });
}</PRE>
        <P>Now there are too few tokens. When you run the JUnit test, the 
        message 'More tokens expected than returned.' is returned: 
        <P><IMG alt="error result from JUnit test." 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/junit-more-tokens-than-returned.png"> 

        <P>Finally, let's test to see that the IDE understands more than just 
        when there are too many or too few tokens—it should also know when a 
        token is in the wrong place. Add the token that specifies the 
        end-of-line. For example, here <TT>\n</TT> is added right after the name 
        and before the colon: 
        <P></P><PRE class=examplecode>public void testNextToken() {
  doParse("Manifest-Version\n:1.0", new TokenID[] {
       ManifestTokenContext.NAME,
       ManifestTokenContext.COLON,
       ManifestTokenContext.VALUE,
  });
}</PRE>
        <P>When you run the test, the following error is returned: 
        <P><IMG alt="error result from JUnit test." 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/junit-wrong-token.png"> 

        <P>Now that we know that the IDE correctly converts manifest entries 
        into tokens, lets create an editor to work with Manifest files and 
        associate colors with tokens. </P></LI></OL>
      <H3 class=tutorial><A name=editorkitting></A>Creating the EditorKit</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Right-click the <TT>ManifestSupport</TT> 
        project node, choose New &gt; Java Class, and type 
        <TT>ManifestEditorKit</TT> in Class Name. Click Finish. The new Java 
        class opens in the Source Editor. Replace the default code with the 
        following: <PRE class=examplecode>package org.netbeans.modules.manifestsupport;

import javax.swing.text.Document;
import org.netbeans.editor.BaseDocument;
import org.netbeans.editor.Syntax;
import org.netbeans.editor.SyntaxSupport;
import org.netbeans.modules.editor.NbEditorKit;
import org.openide.ErrorManager;

public class ManifestEditorKit extends <A href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor/org/netbeans/modules/editor/NbEditorKit.html">NbEditorKit</A> {
   
    public static final String MIME_TYPE = "text/x-java-jar-manifest"; // NOI18N
    
    /** 
     * Creates a new instance of ManifestEditorKit 
     */
    public ManifestEditorKit() { 
    }
    
    /**
     * Create a syntax object suitable for highlighting Manifest file syntax
     */
    public Syntax createSyntax(Document doc) {  
        return new ManifestSyntax();
    }
    
    /**
     * Retrieves the content type for this editor kit
     */
    public String getContentType() {
        return MIME_TYPE;
    }
}</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This Java class specifies an <A 
        href="http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/text/EditorKit.html">EditorKit</A> 
        specifically for a NetBeans editor. Therefore, it extends the <A 
        href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-modules-editor/org/netbeans/modules/editor/NbEditorKit.html">NBEditorKit</A> 
        class. An editor kit establishes the set of things needed by a text 
        component to be a reasonably functioning editor for some type of text 
        content. In this case, the editor is for content that uses the 
        <TT>text/x-java-jar-manifest</TT> MIME Type. </LI></OL>
      <H3 class=tutorial><A name=syntaxcoloring></A>Creating the Syntax 
      Coloring</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Right-click the <TT>ManifestSupport</TT> 
        project node, choose New &gt; Java Class, and type 
        <TT>ManifestSettingsInitializer</TT> in Class Name. Click Finish. The 
        new Java class opens in the Source Editor. Replace the default code with 
        the following: <PRE class=examplecode>package org.netbeans.modules.manifestsupport;

import java.awt.Color;
import java.awt.Font;
import java.util.Map;
import org.netbeans.editor.BaseKit;
import org.netbeans.editor.Coloring;
import org.netbeans.editor.Settings;
import org.netbeans.editor.SettingsDefaults;
import org.netbeans.editor.SettingsNames;
import org.netbeans.editor.SettingsUtil;
import org.netbeans.editor.TokenCategory;
import org.netbeans.editor.TokenContext;
import org.netbeans.editor.TokenContextPath;

public class ManifestSettingsInitializer 
        extends Settings.AbstractInitializer {
    
    public static final String NAME = 
            "manifest-settings-initializer"; // NOI18N
    
    /**
     * Constructor
     */
    public ManifestSettingsInitializer() {
        super(NAME);
    }
    
    /**
     * Update map filled with the settings.
     * @param kitClass kit class for which the settings are being updated.
     *   It is always non-null value.
     * @param settingsMap map holding [setting-name, setting-value] pairs.
     *   The map can be empty if this is the first initializer
     *   that updates it or if no previous initializers updated it.
     */
    public void updateSettingsMap(Class kitClass, Map settingsMap) {
        if (kitClass == BaseKit.class) {
            new ManifestTokenColoringInitializer().
                    updateSettingsMap(kitClass, settingsMap);
        }
        
        if (kitClass == ManifestEditorKit.class) {
            SettingsUtil.updateListSetting(
                    settingsMap,
                    SettingsNames.TOKEN_CONTEXT_LIST,
                    new TokenContext[] 
            { ManifestTokenContext.context }
            );
        }
    }
    
    /**
     * Class for adding syntax coloring to the editor
     */
    /** Properties token coloring initializer. */
    private static class ManifestTokenColoringInitializer 
            extends SettingsUtil.TokenColoringInitializer {
        
        /** Bold font. */
        private static final Font boldFont = 
                SettingsDefaults.defaultFont.deriveFont(Font.BOLD);
        /** Italic font. */
        private static final Font italicFont = 
                SettingsDefaults.defaultFont.deriveFont(Font.ITALIC);
        
        /** Key coloring. */
        private static final Coloring keyColoring = 
                new Coloring(boldFont, Coloring.FONT_MODE_APPLY_STYLE, 
                Color.blue, null);
        /** Value coloring. */
        private static final Coloring valueColoring = 
                new Coloring(null, Color.magenta, null);
        /** Colon coloring. */
        private static final Coloring colonColoring = 
                new Coloring(null, Color.DARK_GRAY, null);
        /** Empty coloring. */
        private static final Coloring emptyColoring = 
                new Coloring(null, null, null);
        
        
        /** Constructs <CODE>PropertiesTokenColoringInitializer</CODE>. */
        public ManifestTokenColoringInitializer() {
            super(ManifestTokenContext.context);
        }
        
        
        /** Gets token coloring. */
        public Object getTokenColoring(TokenContextPath tokenContextPath,
                TokenCategory tokenIDOrCategory, boolean printingSet) {
            
            if(!printingSet) {
                int tokenID = tokenIDOrCategory.getNumericID();
                
                if(tokenID == ManifestTokenContext.NAME_ID) {
                    return keyColoring;
                } else if(tokenID == ManifestTokenContext.VALUE_ID) {
                    return valueColoring;
                } else if(tokenID == ManifestTokenContext.COLON_ID) {
                    return colonColoring;
                    
                }
            } else { // printing set
                return SettingsUtil.defaultPrintColoringEvaluator;
            }
            
            return null;
        }
        
    } // End of class ManifestTokenColoringInitializer.
    
}</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This Java class sets the default colors 
        for our tokens. Thanks to the supporting files described in the 
        following sections, the user will be able to use the Options window to 
        change the defaults. </LI></OL>
      <H3 class=tutorial><A name=colorrestoring></A>Creating the Color 
      Restorer</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Right-click the <TT>ManifestSupport</TT> 
        project node, choose New &gt; Java Class, and type <TT>RestoreColoring 
        </TT>in Class Name. Click Finish. The new Java class opens in the Source 
        Editor. Replace the default code with the following: <PRE class=examplecode>package org.netbeans.modules.manifestsupport;

import org.netbeans.editor.LocaleSupport;
import org.netbeans.editor.Settings;
import org.openide.modules.ModuleInstall;
import org.openide.util.NbBundle;

public class RestoreColoring extends <A href="http://www.netbeans.org/download/dev/javadoc/org-openide-modules/org/openide/modules/ModuleInstall.html">ModuleInstall</A> {
    
    /**
     * <CODE>Localizer</CODE> passed to editor.
     */
    private static LocaleSupport.Localizer localizer;
    
    /**
     * Registers properties editor, installs options and copies settings.
     * Overrides superclass method.
     */
    public void restored() {
        addInitializer();
        installOptions();
    }
    
    /**
     * Uninstalls properties options.
     * And cleans up editor settings copy.
     * Overrides superclass method.
     */
    public void uninstalled() {
        uninstallOptions();
    }
    
    /**
     * Adds initializer and registers editor kit.
     */
    public void addInitializer() {
        Settings.addInitializer(new ManifestSettingsInitializer());
    }
    
    /**
     * Installs properties editor and print options.
     */
    public void installOptions() {
        // Adds localizer.
        LocaleSupport.addLocalizer(localizer = new LocaleSupport.Localizer() {
            public String getString(String key) {
                return NbBundle.getMessage(RestoreColoring.class, key);
            }
        });
    }
    
    /** Uninstalls properties editor and print options. */
    public void uninstallOptions() {
        // remove localizer
        LocaleSupport.removeLocalizer(localizer);
    }
    
}</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This Java class is used to install the 
        module and maintain its state. In addition to creating it, you must 
        specify this class in the module's manifest file, by adding the 
        following line: 
        <P></P><PRE class=examplecode>OpenIDE-Module-Install: org/netbeans/modules/manifestsupport/RestoreColoring.class</PRE>
        <P>
        <P>Note that the <TT>OpenIDE-Module-Install</TT> key belongs at the end 
        of the first section (it is highlighted in bold below): 
        <P></P><PRE class=examplecode>Manifest-Version: 1.0
OpenIDE-Module: org.netbeans.modules.manifestsupport
OpenIDE-Module-Layer: org/netbeans/modules/manifestsupport/layer.xml
OpenIDE-Module-Localizing-Bundle: org/netbeans/modules/manifestsupport/Bundle.properties
OpenIDE-Module-Specification-Version: 1.0
<B>OpenIDE-Module-Install: org/netbeans/modules/manifestsupport/RestoreColoring.class</B>

Name: org/netbeans/modules/manifestsupport/dataobject/ManifestDataLoader.class
OpenIDE-Module-Class: Loader</PRE></LI></OL>
      <H2><A name=creatingthemodule></A>Creating the Supporting Files</H2>
      <P>In this section, you update the Options window to allow the user to 
      customize the way the tokens are presented in the IDE. Not only the 
      colors, but also the font type and style, and the Manifest editor itself, 
      can then be modified by the user in the Options window. 
      <DIV class=indent>
      <P>
      <H3 class=tutorial><A name=creatingoptions></A>Creating the Options</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Right-click the <TT>ManifestSupport</TT> 
        project node, choose New &gt; Java Class, type <TT>ManifestOptions</TT> 
        in Class Name, and type 
        <TT>org.netbeans.modules.manifestsupport.options</TT> in Package. Click 
        Finish. The new Java class opens in the Source Editor. Replace the 
        default code with the following: <PRE class=examplecode>package org.netbeans.modules.manifestsupport.options;

import java.util.MissingResourceException;
import org.netbeans.modules.editor.options.BaseOptions;
import org.netbeans.modules.manifestsupport.ManifestEditorKit;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

public class ManifestOptions extends BaseOptions {
    
    public static String MANIFEST = "Manifest"; // NOI18N
    
    /** Name of property. */
    private static final String HELP_ID = "editing.editor.mf"; // NOI18N
    
    //no manifest specific options at this time
    static final String[] MF_PROP_NAMES = new String[] {};
    
    public ManifestOptions() {
        super(ManifestEditorKit.class, MANIFEST);
    }
    
    /**
     * Gets the help ID
     */
    public HelpCtx getHelpCtx() {
        return new HelpCtx(HELP_ID);
    }
    
    /**
     * Look up a resource bundle message, if it is not found locally defer to
     * the super implementation
     */
    protected String getString(String key) {
        try {
            return NbBundle.getMessage(ManifestOptions.class, key);
        } catch (MissingResourceException e) {
            return super.getString(key);
        }
    }
    
}</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This Java class registers the 
        <TT>ManifestEditorKit</TT> in the Options window. If there were 
        properties specific to the Manifest Editor, they would be added in the 
        <TT>static final String[] MF_PROP_NAMES = new String[] {};</TT> 
        declaration. However, in this implementation, only the default options 
        will be supported. In addition, this file adds the string 'Manifest' to 
        the drop-down list in the Code Templates page of the Editor section, as 
        shown below: 
        <P><IMG alt="Fonts and Colors 2" 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/fonts-and-colors-2.png"> 
        </P></LI></OL>
      <H3 class=tutorial><A name=dipslayingoptionsinoptionswindow></A>Displaying 
      the Options in the Options Window</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Create the <TT>ManifestOptionsBeanInfo</TT> 
        file and add it to the 
        <TT>org.netbeans.modules.manifestsupport.options</TT> package. Replace 
        the default code with the following: <PRE class=examplecode>package org.netbeans.modules.manifestsupport.options;

import java.util.MissingResourceException;
import org.netbeans.modules.editor.options.BaseOptionsBeanInfo;
import org.netbeans.modules.editor.options.OptionSupport;
import org.openide.util.NbBundle;

public class ManifestOptionsBeanInfo extends BaseOptionsBeanInfo {
    
    /**
     * Constructor. The parameter in the superclass constructor is the
     * icon prefix. 
     */
    public ManifestOptionsBeanInfo() {
        super("/org/netbeans/modules/manifestsupport/options/mfOptions"); // NOI18N
    }
    
    /*
     * Gets the property names after merging it with the set of properties
     * available from the BaseOptions from the editor module.
     */
    protected String[] getPropNames() {
        return OptionSupport.mergeStringArrays(
                super.getPropNames(),
                ManifestOptions.MF_PROP_NAMES);
    }
    
    /**
     * Get the class described by this bean info
     */
    protected Class getBeanClass() {
        return ManifestOptions.class;
    }
    
    /**
     * Look up a resource bundle message, if it is not found locally defer to
     * the super implementation
     */
    protected String getString(String key) {
        try {
            return NbBundle.getMessage(ManifestOptionsBeanInfo.class, key);
        } catch (MissingResourceException e) {
            return super.getString(key);
        }
    }
}</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This Java class displays the options 
        specified in <TT>ManifestOptions</TT> in the Options window. The file 
        referenced in the constructor can be any 16x16 pixel file. If you do not 
        have one, you can get it from the downloadable ZIP file at the top of 
        the page or you can right-click and save it here: <IMG alt=mfOptions 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/mfOptions.gif"> 

        <P>Add a <TT>Bundle.properties</TT> file to the 
        <TT>org.netbeans.modules.manifestsupport.options</TT> package and add 
        this line to it: 
        <P></P><PRE class=examplecode>OPTIONS_Manifest=Manifest Editor</PRE>
        <P>The string after the "OPTIONS_" above <B>must</B> match the String 
        declaration in the <TT>ManifestOptions</TT> class. For example, in this 
        tutorial, the following string is declared in 
        <TT>ManifestOptions.java</TT>: 
        <P></P><PRE class=examplecode>public static String MANIFEST = "Manifest";</PRE>
        <P>However, if this line was as follows: 
        <P></P><PRE class=examplecode>public static String MANIFEST = "MF";</PRE>Then 
        the <TT>Bundle.properties</TT> file would specify this string instead: 
        <P></P><PRE class=examplecode>OPTIONS_MF=Manifest Editor</PRE>
        <P>Note also that the string is case-sensitive. 
        <P>Now this is the label that will be displayed in the Classic View of 
        the Options window, to distinguish the Manifest Editor section from the 
        other editors displayed in the Classic View of the Options window, as 
        shown below: 
        <P><IMG alt="Fonts and Colors 3" 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/fonts-and-colors-3.png"> 

        <P>Notice that there is an icon to the left of the label 'Manifest 
        Editor' in the screenshot above. This is the <TT>mfOptions.gif</TT> file 
        specified in the <TT>ManifestOptionsBeanInfo </TT>class. </P></LI></OL>
      <H3 class=tutorial><A name=instantiating></A>Instantiating the 
Options</H3>
      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Create the file.</B> Create an XML file called 
        <TT>ManifestOptions.settings</TT> and place it in the 
        <TT>org.netbeans.modules.manifestsupport.options</TT> package. Replace 
        the default code with the following: <PRE class=examplecode>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE settings PUBLIC "-//NetBeans//DTD Session settings 1.0//EN" 
 "http://www.netbeans.org/dtds/sessionsettings-1_0.dtd"&gt;
&lt;settings version="1.0"&gt;
    &lt;module name="org.netbeans.modules.manifestsupport"/&gt;
    &lt;instanceof class="java.io.Externalizable"/&gt;
    &lt;instanceof class="org.openide.util.SharedClassObject"/&gt;
    &lt;instanceof class="java.beans.beancontext.BeanContextProxy"/&gt;
    &lt;instanceof class="java.io.Serializable"/&gt;
    &lt;instanceof class="org.openide.options.SystemOption"/&gt;
    &lt;instanceof class="org.netbeans.modules.editor.options.OptionSupport"/&gt;
    &lt;instanceof class="org.netbeans.modules.editor.options.BaseOptions"/&gt;
    &lt;instance class="org.netbeans.modules.manifestsupport.options.ManifestOptions"/&gt;
&lt;/settings&gt;</PRE>
        <P></P>
        <LI><B>Understand the file.</B> This file lets the IDE quickly 
        instantiate the <TT>ManifestOptions.java</TT> file, whenever called upon 
        to do so. The next section shows you how to register the settings file 
        in the NetBeans System Filesystem. </LI></OL>
      <H3 class=tutorial><A name=registeringoptions></A>Registering the Options 
      in the NetBeans System Filesystem</H3>
      <P>To register the module in the Options window, you must do the following 
      in the <TT>layer.xml</TT> file: 
      <UL>
        <LI>Create default colors for each profile that the IDE supports. 
        Currently, the IDE supports a profile called 'NetBeans' and a profile 
        called 'City Lights'. They can be selected from the Profile drop-down 
        list at the top of the Fonts &amp; Colors section. 
        <LI>Register the <TT>ManifestEditorKit.java</TT> class. 
        <LI>Register the <TT>ManifestOptions.settings</TT> file. 
        <LI>Create a file containing a text that will be shown in the Preview 
        window, at the bottom of the Fonts &amp; Colors section of the Options 
        window. 
        <LI>Localize the strings in the <TT>layer.xml</TT> file. </LI></UL>
      <P>The screenshot on the left shows the NetBeans profile; on the right you 
      see the City Lights profile: 
      <P><IMG alt="Fonts and Colors 1" 
      src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/fonts-and-colors-1.png"> 
      <IMG alt="Fonts and Colors 4" 
      src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/fonts-and-colors-4.png"> 

      <P>Do the following: 
      <OL>
        <P>
        <LI><B>Update the <TT>layer.xml</TT> file.</B> Add the following entries 
        to the <TT>layer.xml</TT> file: <PRE class=examplecode>&lt;folder name="Editors"&gt;
    &lt;folder name="text"&gt;
        &lt;folder name="x-java-jar-manifest"&gt;
            &lt;attr name="SystemFileSystem.localizingBundle" 
            stringvalue="org.netbeans.modules.manifestsupport.Bundle"/&gt;
            &lt;folder name="NetBeans"&gt;
                &lt;folder name="Defaults"&gt;
                    &lt;file name="coloring.xml" 
                        url="resources/NetBeans-Manifest-fontsColors.xml"&gt;
                        &lt;attr name="SystemFileSystem.localizingBundle" 
                        stringvalue="org.netbeans.modules.manifestsupport.Bundle"/&gt;
                    &lt;/file&gt;
                &lt;/folder&gt;
            &lt;/folder&gt; 
            &lt;folder name="CityLights"&gt;
                &lt;folder name="Defaults"&gt;
                    &lt;file name="coloring.xml" 
                        url="resources/CityLights-Properties-fontsColors.xml"&gt;
                        &lt;attr name="SystemFileSystem.localizingBundle" 
                        stringvalue="org.netbeans.modules.manifestsupport.Bundle"/&gt;
                    &lt;/file&gt;
                &lt;/folder&gt;
            &lt;/folder&gt;
            &lt;file name="Settings.settings" 
            url="options/ManifestOptions.settings"/&gt;
            &lt;file name="EditorKit.instance"&gt;
                &lt;attr name="instanceClass" 
                stringvalue="org.netbeans.modules.manifestsupport.ManifestEditorKit"/&gt;
            &lt;/file&gt;
        &lt;/folder&gt;
    &lt;/folder&gt;
&lt;/folder&gt;

&lt;folder name="OptionsDialog"&gt;
    &lt;folder name="PreviewExamples"&gt;
        &lt;folder name="text"&gt;
            &lt;file name="x-java-jar-manifest" url="resources/ManifestExample"/&gt;
        &lt;/folder&gt;
    &lt;/folder&gt;
&lt;/folder&gt;</PRE>
        <P></P>
        <LI><B>Localize the Fonts &amp; Colors page.</B> In the package where 
        the <TT>layer.xml</TT> file is found (i.e., in 
        <TT>org.netbeans.modules.manifestsupport</TT>), add the following 
        entries to the <TT>Bundle.properties</TT> file: 
        <P></P><PRE class=examplecode>text/x-java-jar-manifest=Manifest
NetBeans=NetBeans
mf-name=Name
mf-value=Value
mf-colon=Colon</PRE>
        <P></P>
        <LI><B>Create a color file for each profile.</B> Create a package called 
        <TT>org.netbeans.modules.manifestsupport.resources</TT> and add two 
        files, <TT>NetBeans-Manifest-fontsColors.xml</TT> and 
        <TT>CityLights-Properties-fontsColors.xml</TT>: 
        <UL>
          <P>
          <LI><TT>NetBeans-Manifest-fontsColors.xml</TT> has the following 
          content: 
          <P></P><PRE class=examplecode>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;fontscolors&gt;
    &lt;fontcolor name="mf-name" foreColor="blue" default="default"/&gt;
    &lt;fontcolor name="mf-value" foreColor="magenta" default="default"/&gt;
    &lt;fontcolor name="mf-colon" default="default"/&gt;
&lt;/fontscolors&gt;</PRE>
          <P></P>
          <LI><TT>CityLights-Properties-fontsColors.xml</TT> has the following 
          content: <PRE class=examplecode>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;fontscolors&gt;
    &lt;fontcolor name="mf-name" default="default"/&gt;
    &lt;fontcolor name="mf-value" default="default"/&gt;
    &lt;fontcolor name="mf-colon" default="default"/&gt;
&lt;/fontscolors&gt;</PRE></LI></UL>
        <P></P>
        <LI><B>Create the Preview file.</B> At the bottom of the Fonts &amp; 
        Colors section in the Options window, the user can preview changes made 
        to the way the Manifest file's entries are displayed in the editor. To 
        specify the text that is displayed in the preview window, you need to 
        create a file, as specified in the <TT>OptionsDialog</TT> folder of the 
        <TT>layer.xml</TT> file above. In the 
        <TT>org.netbeans.modules.manifestsupport.resources</TT> package, add a 
        file called <TT>ManifestExample</TT> (note that this file has no 
        extension), with the following content: 
        <P></P><PRE class=examplecode>Manifest-Version: 1.0</PRE></LI></OL>
      <H2><A name=building></A>Building and Installing the Module</H2>
      <P>The IDE uses an Ant build script to build and install your module. The 
      build script is created for you when you create the module project.</P>
      <DIV class=indent>
      <H3 class=tutorial>Installing and Testing the NetBeans Module</H3>
      <P>
      <OL>
        <LI>In the Projects window, right-click the <TT>ManifestSupport</TT> 
        project and choose Install/Reload in Target Platform. 
        <P>The module is built and installed in the target IDE or Platform. The 
        target IDE or Platform opens so that you can try out your new module. 
        The default target IDE or Platform is the installation used by the 
        current instance of the development IDE. Note that when you run your 
        module, you will be using a temporary test user directory, not the 
        development IDE's user directory. </P>
        <LI>Choose File &gt; New Project (Ctrl-Shift-N). Create a new Java 
        application project or a new Plug-in Module project. Open the project's 
        Manifest file in the Source Editor and notice the syntax highlighting. 
        <P>For other aspects of this module, see the <A 
        href="http://platform.netbeans.org/tutorials/nbm-mfsyntax.html#introducing-sample">Introducing 
        the Sample</A> section. </P></LI></OL>
      <P>
      <H3 class=tutorial>Creating a Shareable Module Binary (NBM File)</H3>
      <P>An NBM file is a NetBeans module packaged for delivery via the web. The 
      principal differences between NBM files and module JAR files are: 
      <UL>
        <LI>An NBM file is compressed. 
        <LI>An NBM file can contain more than one JAR file—modules can package 
        any libraries they use into their NBM file. 
        <LI>An NBM file contains metadata that NetBeans will use to display 
        information about it in the Update Center, such as the manifest 
        contents, the license, etc. 
        <LI>An NBM file is typically signed for security purposes.</LI></UL>
      <P>NBM files are just ZIP files with a special extension. They use the 
      JDK's mechanism for signing JAR files. Unless you are doing something 
      unusual, you will not need to worry about the contents of an NBM file—just 
      let the standard Ant build script for NBM creation take care of it for 
      you. The IDE generates the build script based on the options you enter in 
      the project's Project Properties dialog box. You can set the module's 
      dependencies, versioning, and packaging information in the Project 
      Properties dialog box. You can further customize program execution by 
      editing the Ant script and Ant properties for the project. 
      <OL>
        <LI>In the Projects window, right-click the <TT>ManifestSupport</TT> 
        project node and choose Create NBM. 
        <P>The NBM file is created and you can view it in the Files window 
        (Ctrl-2): 
        <P align=left><IMG alt="Shareable NBM." 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/create-nbm.png"> 
        </P>
        <LI>Make it available to others via, for example, e-mail. 
        <P></P>
        <LI>Use the Update Center to install the NBM file. </LI></OL>
      <H2><A name=explore></A>Exploring Further</H2>
      <DIV class=indent>
      <P>Below are some other avenues that you might want to explore.</P>
      <H3 class=tutorial>Associating the EditorKit with a JEditorPane</H3>
      <P>Instead of using the EditorKit in the Source Editor, you can associate 
      it with a <A 
      href="http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/JEditorPane.html">JEditorPane</A>. 

      <P>Do the following: 
      <OL>
        <P>
        <LI>Select the <TT>JEditorPane</TT>, click the <TT>editorKit</TT> 
        property, and make the following selections: 
        <P align=left><IMG alt=editorPane. 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/editorPane.png"> 

        <P></P>
        <LI>Select the <TT>JEditorPane</TT>, click the <TT>contentType</TT> 
        property, and type the Manifest file's MIME Type 
        (<TT>text/x-java-jar-manifest</TT>): 
        <P align=left><IMG alt=editorPane2. 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/editorPane2.png"> 

        <P></P>
        <LI>When you deploy the module, syntax highlighting will be enabled in 
        the JEditorPane: 
        <P align=left><IMG alt=editorPane3. 
        src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/editorPane3.png"> 

        <P>In effect, the JEditorPane is now your editor. You can use the 
        Options window to modify fonts and colors, just as if you were using the 
        Source Editor. </P></LI></OL>
      <H3 class=tutorial>Code Folding</H3>
      <P>To come.</P>
      <H3 class=tutorial>Indentation Engine</H3>
      <P>To come.</P>
      <H3 class=tutorial>Other Options</H3>
      <P>To come.</P></DIV><BR>
      <H2><A name=explore></A>Applying What You Have Learned</H2>
      <DIV class=indent>
      <P>Once you are comfortable with the principles outlined in this tutorial, 
      you can begin applying them to your own scenarios. For example, here is 
      NetBeans user Valentin Buergel's Wiki syntax highlighting:</P>
      <P align=left><IMG alt=wiki-screenshot 
      src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/wiki-screenshot.png"> 
      </P></DIV><BR><!-- ===================================================================================== --><BR>
      <DIV class=feedback-box><A 
      href="http://www.netbeans.org/about/contact_form.html?to=3&amp;subject=Feedback:%20Manifest%20Highlighting%20Module%20Tutorial">Send 
      Us Your Feedback</A></DIV><BR style="CLEAR: both"><!-- ======================================================================================== -->
      <H2><A name=nextsteps></A>Next Steps</H2>
      <P>For more information about creating and developing NetBeans Module, see 
      the following resources: 
      <UL>
        <P>
        <LI><A href="http://platform.netbeans.org/index.html">Module Developer's 
        Resources</A> 
        <P></P>
        <LI><A href="http://www.netbeans.org/download/dev/javadoc/">NetBeans API 
        List (Current Development Version)</A> 
        <P></P>
        <LI><A href="http://apisupport.netbeans.org/new-apisupport.html">New API 
        Support-Proposal</A></LI></UL>
      <P></P>
      <HR>
<!-- ======================================================================================== -->
      <H2><A name=version></A>Versioning </H2>
      <P>
      <TABLE width="76%" border=1>
        <TBODY>
        <TR>
          <TD>
            <DIV align=left><B>Version</B></DIV></TD>
          <TD>
            <DIV align=left><B>Date</B></DIV></TD>
          <TD>
            <DIV align=left><B>Changes</B></DIV></TD>
        <TR>
          <TD>1 </TD>
          <TD>23 October 2005 </TD>
          <TD>
            <UL>
              <LI>Initial version. </LI></UL></TD></TR>
        <TR>
          <TD>2 </TD>
          <TD>30 November 2005 </TD>
          <TD>
            <UL>
              <LI>Added Valentin's screenshot at the end. 
              <LI>Fixed some smaller issues: 
              <UL>
                <LI><A 
                href="http://www.netbeans.org/issues/show_bug.cgi?id=69568">issue 
                69568</A> 
                <LI>Wrong closing tag in one of the coloring XML files. 
                <LI><TT>NbEditorKit</TT> was mistakenly <TT>NBEditorkit</TT> 
                before </LI></UL>
              <LI>Need to fix several larger issues (from Andrei Badea and one 
              or two people from openide mailing list) soon. </LI></UL></TD></TR>
        <TR>
          <TD>3 </TD>
          <TD>5 March 2006 </TD>
          <TD>
            <UL>
              <LI>Several fixes: 
              <UL>
                <LI>Successfully worked through the whole tutorial, using 
                NetBeans IDE 5.x (final version). 
                <LI>Added new test (from Andrei Badea) to assert new line 
                parsing is working. 
                <LI>Fixed layer.xml error relating to new way of registering the 
                preview file. 
                <LI>Tried to use Andrei Badea (and Vladimir) fixes for 
                manifestSyntax,java, but that broke other things. Need to check 
                that with him. </LI></UL></LI></UL></TD></TR>
        <TR>
          <TD>4 </TD>
          <TD>13 June 2006 </TD>
          <TD>
            <UL>
              <LI>Took the ZIP attached to this tutorial, installed the NBM in 
              5.5 dev. No problems, worked as expected, except JUnit test had 
              problems -- no junit.framework.test found in JUnit module. 
              <LI>Following suggestion by Tim B., shortened many lines of code 
              to ensure that people don't need to scroll to the right too much, 
              but some instances of this problem remain. 
              <LI>Need to go back to the code snippets and put back links to 
              Javadoc, which were removed when I replaced the code, straight 
              from the Source Editor, which I did to make sure that the 
              shortened lines wouldn't cause errors. 
              <LI>Need to change the ZIP file to match the changes made in 
              previous versions of the tutorial. 
              <LI>Need to integrate the Module Installer wizard, no need to 
              manually create one (plus automatic manifest.mf and project.xml 
              change). </LI></UL></TD></TR></TBODY></TABLE>
      <P>Many thanks to Andrei Badea, Tom Ball, and Martin Adamek for help and 
      inspiration. <!-- /Servlet-Specific template --><!-- end of right navigation --><!-- servlets and anything not on www or testwww --></P></DIV></DIV></DIV></DIV></DIV></DIV></TD>
    <TD class=valign-top>
      <DIV id=floating-col-right>
      <DIV class="f-page-cell b-bottom bg-bege">
      <SCRIPT 
      src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/loginbox.js" 
      type=text/javascript></SCRIPT>

      <SCRIPT language=JavaScript type=text/javascript>
<!--
show_login_form(username,'Login','Logout','top');
//-->
</SCRIPT>
      <NOSCRIPT><SPAN style="FONT-STYLE: italic">Login form requires 
      Javascript</SPAN></NOSCRIPT> </DIV><!-- start NavCol -->
      <DIV class="f-page-cell bg-sky b-bottom">
      <H2>platform</H2><!-- module left nav .inc file -->
      <SCRIPT 
      src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/left-nav.js" 
      type=text/javascript></SCRIPT>
      <NOSCRIPT>
      <P><A href="http://platform.netbeans.org/index.html">Project Home</A> 
      <BR><A 
      href="http://platform.netbeans.org/servlets/ProjectMemberList">Memebership</A> 
      <BR><A 
      href="http://platform.netbeans.org/servlets/ProjectNewsList">Announcements</A> 
      <BR><A 
      href="http://platform.netbeans.org/servlets/ProjectForumView">Discussion 
      Forums</A> <BR><A 
      href="http://platform.netbeans.org/servlets/ProjectMailingListList">Mailing 
      Lists</A> <BR><A 
      href="http://platform.netbeans.org/servlets/ProjectDocumentList">Documentation 
      &amp; Files</A> <BR><A 
      href="http://platform.netbeans.org/source/browse/core/">Version 
      Control</A> <BR><A 
      href="http://platform.netbeans.org/servlets/ProjectIssues">Issue 
      Tracker</A> </NOSCRIPT></P></DIV><!-- end NavCol --><!-- right navigation -->
      <DIV class="f-page-cell bg-bege b-bottom">
      <H2 
      style="BORDER-RIGHT: 0px; BORDER-TOP: 0px; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px">NetBeans.org</H2>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A 
      href="http://www.netbeans.org/servlets/Join">Join</A></DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A 
      href="http://www.netbeans.org/community/news/">News</A></DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A class=nav 
      href="http://www.netbeans.org/community/releases/">Releases &amp; 
      Planning</A></DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A class=nav 
      href="http://www.netbeans.org/community/lists/">Mailing 
      Lists</A></DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A 
      href="http://www.netbeans.org/community/issues.html">Issuezilla</DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A class=nav 
      href="http://www.netbeans.org/community/contribute/">Contribute</A></DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A class=nav 
      href="http://www.netbeans.org/community/sources/">Source 
      code</A></DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A class=nav 
      href="http://www.netbeans.org/community/teams/">Teams</A></DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A class=nav 
      href="http://www.netbeans.org/community/guidelines/">Guidelines</A></DIV></DIV>
      <DIV class=rrrarticle>
      <DIV class=rarticletitle><A 
      href="http://www.netbeans.org/community/projects/">Projects</A></DIV></DIV></DIV><BR></DIV></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=clear id=floating-footer style="MARGIN-LEFT: 0px"><IMG 
class=float-right style="MARGIN-RIGHT: -3px" height=42 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/footer-floating-corner-r.png" 
width=13> <IMG class=float-left style="MARGIN-LEFT: -3px" height=42 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/footer-floating-corner-l.png" 
width=10> 
<DIV id=footer-text>
<DIV class="float-left font-12" id=footer-navig><A 
href="http://www.cafeshops.com/netbeans/">Shop</A> &nbsp; <A 
href="http://www.netbeans.org/download/sitemaps/platform_map.html">SiteMap</A> 
&nbsp; <A href="http://www.netbeans.org/about/index.html">About Us</A> &nbsp; <A 
href="http://www.netbeans.org/about/contact.html">Contact</A> &nbsp; <A 
href="http://www.netbeans.org/about/legal/index.html">Legal</A> &nbsp; </DIV>
<DIV class=float-right id=tof>By use of this website, you agree to the <A 
href="http://www.netbeans.org/about/legal/terms-of-use.html">NetBeans Policies 
and Terms of Use</A> </DIV></DIV></DIV><!-- Begin SiteCatalyst code -->
<SCRIPT language=JavaScript 
src="platform NetBeans Manifest File Syntax Highlighting Module Tutorial.files/s_code_remote.js"></SCRIPT>
<!-- End SiteCatalyst code --></DIV></DIV></BODY></HTML>
